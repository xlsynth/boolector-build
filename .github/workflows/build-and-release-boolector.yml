name: Build and Release Boolector DSO

# ←‑‑ give the default GITHUB_TOKEN write access to repository contents
permissions:
  contents: write   # needed for creating the release
  packages: read    # optional; keeps default read on packages

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container: debian:10

    steps:
      - uses: actions/checkout@v4

      - name: Set up dependencies
        run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            git gcc g++ libc6-dev libstdc++-8-dev libssl-dev libffi-dev make curl cmake lld ca-certificates python3

      - name: Symlink python → python3
        run: ln -s /usr/bin/python3 /usr/bin/python

      - name: Download and build Boolector 3.2.2
        run: |
          git clone --branch 3.2.2 --depth 1 https://github.com/boolector/boolector
          cd boolector
          ./contrib/setup-lingeling.sh
          ./contrib/setup-btor2tools.sh
          mkdir -p build && cd build
          echo "Configuring Boolector with CMake (Python bindings disabled)..."
          cmake .. -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DBTOR_ENABLE_PYTHON=OFF
          echo "Building Boolector..."
          make

      - name: Run Boolector tests
        run: |
          cd boolector/build
          ctest --output-on-failure

      - name: Set up Rust toolchain
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          . "$HOME/.cargo/env"

      - name: Test Rust bindings (boolector-rs)
        run: |
          . "$HOME/.cargo/env"
          git clone https://github.com/cdisselkoen/boolector-rs
          cd boolector-rs
          export LIBRARY_PATH="$GITHUB_WORKSPACE/boolector/build/lib:$LIBRARY_PATH"
          export LD_LIBRARY_PATH="$GITHUB_WORKSPACE/boolector/build/lib:$LD_LIBRARY_PATH"
          cargo test

      - name: Prepare artifact directory
        run: |
          mkdir -p debian10-artifacts
          cp boolector/COPYING debian10-artifacts/
          cp boolector/build/lib/libboolector.so debian10-artifacts/libboolector-debian10.so
          sha256sum debian10-artifacts/libboolector-debian10.so \
            > debian10-artifacts/libboolector-debian10.so.sha256

      - uses: actions/upload-artifact@v4
        with:
          name: boolector-debian10
          path: debian10-artifacts/

  build-osx-arm64:
    name: Build for macOS ARM64
    runs-on: macos-14 # ARM64 runner

    steps:
      - uses: actions/checkout@v4

      - name: Set up dependencies
        run: |
          brew update
          for p in cmake openssl libffi python; do
            if ! brew list --versions "$p" >/dev/null 2>&1; then
              brew install "$p"
            fi
          done

      - name: Download and build Boolector 3.2.2
        run: |
          git clone --branch 3.2.2 --depth 1 https://github.com/boolector/boolector
          cd boolector
          ./contrib/setup-lingeling.sh
          ./contrib/setup-btor2tools.sh
          mkdir -p build && cd build
          echo "Configuring Boolector with CMake (Python bindings disabled)..."
          cmake .. -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64 -DBTOR_ENABLE_PYTHON=OFF
          echo "Building Boolector..."
          make

      - name: Run Boolector tests
        run: |
          cd boolector/build
          ctest --output-on-failure

      - name: Set up Rust toolchain
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Test Rust bindings (boolector‑rs)
        run: |
          . "$HOME/.cargo/env"
          git clone https://github.com/cdisselkoen/boolector-rs
          cd boolector-rs
          export LIBRARY_PATH="$GITHUB_WORKSPACE/boolector/build/lib:$LIBRARY_PATH"
          export DYLD_FALLBACK_LIBRARY_PATH="$GITHUB_WORKSPACE/boolector/build/lib:$DYLD_FALLBACK_LIBRARY_PATH"
          cargo test

      - name: Prepare artifact directory
        run: |
          mkdir -p osx-arm64-artifacts
          cp boolector/COPYING osx-arm64-artifacts/
          LIB_DYLIB=$(find boolector/build -type f \( -name 'libboolector.dylib' -o -name 'libboolector.*.dylib' \) | head -n1)
          if [ -z "$LIB_DYLIB" ]; then echo "libboolector.dylib not found"; exit 1; fi
          cp "$LIB_DYLIB" osx-arm64-artifacts/libboolector-osx-arm64.dylib
          shasum -a 256 osx-arm64-artifacts/libboolector-osx-arm64.dylib \
            > osx-arm64-artifacts/libboolector-osx-arm64.dylib.sha256

      - uses: actions/upload-artifact@v4
        with:
          name: boolector-osx-arm64
          path: osx-arm64-artifacts/

  release:
    needs: [build, build-osx-arm64]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
      # checkout again so gh has a .git directory
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: boolector-debian10
          path: boolector-debian10

      - uses: actions/download-artifact@v4
        with:
          name: boolector-osx-arm64
          path: boolector-osx-arm64

      - name: List downloaded files
        run: |
          echo "--- Debian 10 artifacts ---"
          ls -lR boolector-debian10
          echo "--- macOS ARM64 artifacts ---"
          ls -lR boolector-osx-arm64

      - name: Create GitHub release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: boolector-binaries-${{ github.sha }}
        run: |
          gh release create "$TAG_NAME" \
            boolector-debian10/libboolector-debian10.so \
            boolector-debian10/libboolector-debian10.so.sha256 \
            boolector-debian10/COPYING \
            boolector-osx-arm64/libboolector-osx-arm64.dylib \
            boolector-osx-arm64/libboolector-osx-arm64.dylib.sha256 \
            boolector-osx-arm64/COPYING \
            --title "Release $TAG_NAME" \
            --notes "Automated release of $TAG_NAME. Includes Debian 10 (amd64) and macOS (arm64) binaries."
